// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.27.3
// source: v1/tunnel.proto

package tunnelv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ControlCode defines the core intent of a Packet
// This is the "verb" of the protocol
type ControlCode int32

const (
	// Default value, indicates this is a standard business data packet
	ControlCode_DATA ControlCode = 0
	// Indicates that the data stream corresponding to a stream_id has ended normally
	// The data field should be empty when sending this packet
	ControlCode_STREAM_EOF ControlCode = 1
	// Indicates an error occurred in processing the stream for a stream_id
	// The error_message field should contain error details
	ControlCode_STREAM_ERROR ControlCode = 2
	// Sent by the Hub side to check tunnel health
	// stream_id can be 0 or a random number
	ControlCode_PING ControlCode = 3
	// Sent by the Agent side in response to PING, to confirm tunnel health
	// stream_id should match the received PING packet
	ControlCode_PONG ControlCode = 4
	// Graceful shutdown: Sent by either side to notify the peer it will soon go offline and should not assign new streams
	ControlCode_DRAIN ControlCode = 5
	// Explicit acknowledgement of stream closure, sent in response to STREAM_EOF for strict confirmation
	ControlCode_STREAM_EOF_ACK ControlCode = 6
)

// Enum value maps for ControlCode.
var (
	ControlCode_name = map[int32]string{
		0: "DATA",
		1: "STREAM_EOF",
		2: "STREAM_ERROR",
		3: "PING",
		4: "PONG",
		5: "DRAIN",
		6: "STREAM_EOF_ACK",
	}
	ControlCode_value = map[string]int32{
		"DATA":           0,
		"STREAM_EOF":     1,
		"STREAM_ERROR":   2,
		"PING":           3,
		"PONG":           4,
		"DRAIN":          5,
		"STREAM_EOF_ACK": 6,
	}
)

func (x ControlCode) Enum() *ControlCode {
	p := new(ControlCode)
	*p = x
	return p
}

func (x ControlCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlCode) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_tunnel_proto_enumTypes[0].Descriptor()
}

func (ControlCode) Type() protoreflect.EnumType {
	return &file_v1_tunnel_proto_enumTypes[0]
}

func (x ControlCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlCode.Descriptor instead.
func (ControlCode) EnumDescriptor() ([]byte, []int) {
	return file_v1_tunnel_proto_rawDescGZIP(), []int{0}
}

// Packet is the atomic unit transmitted in the tunnel
type Packet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to associate requests and responses, implements multiplexing ID
	// For tunnel-level messages (such as PING/PONG/DRAIN), can be 0
	StreamId int64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// [Key optimization] The intent code of the packet, makes processing logic clearer
	Code ControlCode `protobuf:"varint,2,opt,name=code,proto3,enum=tunnel.v1.ControlCode" json:"code,omitempty"`
	// Business payload, only meaningful when code = DATA
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Metadata, used for routing, tracing, etc., provides design flexibility
	// Strongly recommend to standardize key names for routing (e.g., {"host": "...", "port": "..."})
	// and document any required headers for interoperability.
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Error message, only meaningful when code = STREAM_ERROR
	ErrorMessage  string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_v1_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_v1_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Packet) GetCode() ControlCode {
	if x != nil {
		return x.Code
	}
	return ControlCode_DATA
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Packet) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Packet) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_v1_tunnel_proto protoreflect.FileDescriptor

const file_v1_tunnel_proto_rawDesc = "" +
	"\n" +
	"\x0fv1/tunnel.proto\x12\ttunnel.v1\"\x80\x02\n" +
	"\x06Packet\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\x03R\bstreamId\x12*\n" +
	"\x04code\x18\x02 \x01(\x0e2\x16.tunnel.v1.ControlCodeR\x04code\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x128\n" +
	"\aheaders\x18\x04 \x03(\v2\x1e.tunnel.v1.Packet.HeadersEntryR\aheaders\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*l\n" +
	"\vControlCode\x12\b\n" +
	"\x04DATA\x10\x00\x12\x0e\n" +
	"\n" +
	"STREAM_EOF\x10\x01\x12\x10\n" +
	"\fSTREAM_ERROR\x10\x02\x12\b\n" +
	"\x04PING\x10\x03\x12\b\n" +
	"\x04PONG\x10\x04\x12\t\n" +
	"\x05DRAIN\x10\x05\x12\x12\n" +
	"\x0eSTREAM_EOF_ACK\x10\x062E\n" +
	"\rTunnelService\x124\n" +
	"\x06Tunnel\x12\x11.tunnel.v1.Packet\x1a\x11.tunnel.v1.Packet\"\x00(\x010\x01B:Z8github.com/xuezhaojun/multiclustertunnel/api/v1;tunnelv1b\x06proto3"

var (
	file_v1_tunnel_proto_rawDescOnce sync.Once
	file_v1_tunnel_proto_rawDescData []byte
)

func file_v1_tunnel_proto_rawDescGZIP() []byte {
	file_v1_tunnel_proto_rawDescOnce.Do(func() {
		file_v1_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_tunnel_proto_rawDesc), len(file_v1_tunnel_proto_rawDesc)))
	})
	return file_v1_tunnel_proto_rawDescData
}

var file_v1_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_v1_tunnel_proto_goTypes = []any{
	(ControlCode)(0), // 0: tunnel.v1.ControlCode
	(*Packet)(nil),   // 1: tunnel.v1.Packet
	nil,              // 2: tunnel.v1.Packet.HeadersEntry
}
var file_v1_tunnel_proto_depIdxs = []int32{
	0, // 0: tunnel.v1.Packet.code:type_name -> tunnel.v1.ControlCode
	2, // 1: tunnel.v1.Packet.headers:type_name -> tunnel.v1.Packet.HeadersEntry
	1, // 2: tunnel.v1.TunnelService.Tunnel:input_type -> tunnel.v1.Packet
	1, // 3: tunnel.v1.TunnelService.Tunnel:output_type -> tunnel.v1.Packet
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_v1_tunnel_proto_init() }
func file_v1_tunnel_proto_init() {
	if File_v1_tunnel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_tunnel_proto_rawDesc), len(file_v1_tunnel_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_tunnel_proto_goTypes,
		DependencyIndexes: file_v1_tunnel_proto_depIdxs,
		EnumInfos:         file_v1_tunnel_proto_enumTypes,
		MessageInfos:      file_v1_tunnel_proto_msgTypes,
	}.Build()
	File_v1_tunnel_proto = out.File
	file_v1_tunnel_proto_goTypes = nil
	file_v1_tunnel_proto_depIdxs = nil
}
